import depthai as dai
import cv2
import numpy as np

def detect_light_blue(threshold=5000):
    """
    Detects light blue color using OAK-D camera and returns True if detected in the lower half of the frame.
    
    :param threshold: Minimum number of pixels to consider detection valid
    :return: True if light blue color is detected in the lower half, False otherwise
    """
    # Create a pipeline for OAK-D camera
    pipeline = dai.Pipeline()

    # Define a color camera node (use CAM_A for the RGB camera)
    cam_rgb = pipeline.createColorCamera()
    cam_rgb.setBoardSocket(dai.CameraBoardSocket.CAM_A)  # Updated to use CAM_A
    cam_rgb.setPreviewSize(640, 480)
    cam_rgb.setInterleaved(False)

    # Create an output node to stream video to the host
    xout_rgb = pipeline.createXLinkOut()
    xout_rgb.setStreamName("rgb")
    cam_rgb.preview.link(xout_rgb.input)

    # Start the pipeline
    with dai.Device(pipeline) as device:
        # Output queue for RGB camera
        q_rgb = device.getOutputQueue(name="rgb", maxSize=4, blocking=False)

        while True:
            # Get the latest frame from the camera
            in_rgb = q_rgb.get()
            frame = in_rgb.getCvFrame()

            # Take the lower half of the frame
            height, width, _ = frame.shape
            lower_half = frame[height // 2:, :]

            # Convert the lower half from BGR to HSV
            hsv_lower_half = cv2.cvtColor(lower_half, cv2.COLOR_BGR2HSV)

            # Define the range for light blue color in HSV
            light_blue_lower = np.array([90, 50, 50])  # Lower bound for light blue
            light_blue_upper = np.array([130, 255, 255])  # Upper bound for light blue

            # Create a mask for light blue color in the lower half
            mask = cv2.inRange(hsv_lower_half, light_blue_lower, light_blue_upper)

            # Count the number of non-zero pixels in the mask
            light_blue_pixels = cv2.countNonZero(mask)

            # Check if the number of detected pixels is above the threshold
            if light_blue_pixels > threshold:
                return True

            # Display the original frame, the lower half, and the mask (for debugging purposes)
            cv2.imshow("OAK-D Camera Feed", frame)
            cv2.imshow("Lower Half Detection", lower_half)
            cv2.imshow("Light Blue Detection (Lower Half)", mask)

            # Exit loop if 'q' is pressed (for testing purposes)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        # Clean up
        cv2.destroyAllWindows()

    return False

# Example usage
detected = detect_light_blue()
if detected:
    print("Light blue color detected in the lower half!")
else:
    print("Light blue color not detected in the lower half.")
